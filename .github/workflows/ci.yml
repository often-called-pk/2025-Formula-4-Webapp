name: CI Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

env:
  NODE_VERSION: '20'
  PYTHON_VERSION: '3.11'

jobs:
  # Frontend Tests and Build
  frontend-tests:
    runs-on: ubuntu-latest
    name: Frontend Tests & Build
    
    steps:
    - name: Checkout Code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: |
          package-lock.json
          dashboard/package-lock.json

    - name: Install Root Dependencies
      run: npm ci

    - name: Install Frontend Dependencies
      working-directory: ./dashboard
      run: npm ci

    - name: Run Frontend Linting
      working-directory: ./dashboard
      run: npm run lint

    - name: Run Frontend Type Check
      working-directory: ./dashboard  
      run: npm run type-check
      continue-on-error: true

    - name: Run Frontend Tests
      working-directory: ./dashboard
      run: npm run test
      continue-on-error: true

    - name: Build Frontend
      working-directory: ./dashboard
      run: npm run build

    - name: Upload Frontend Build Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: frontend-build
        path: dashboard/dist/
        retention-days: 7

  # Backend Tests and Build
  backend-tests:
    runs-on: ubuntu-latest
    name: Backend Tests & Build
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_DB: test_db
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_password
          POSTGRES_HOST_AUTH_METHOD: trust
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - name: Checkout Code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: backend/package-lock.json

    - name: Install Backend Dependencies
      working-directory: ./backend
      run: npm ci

    - name: Run Backend Linting
      working-directory: ./backend
      run: npm run lint

    - name: Run Backend Tests
      working-directory: ./backend
      run: npm test
      env:
        NODE_ENV: test
        DB_HOST: localhost
        DB_PORT: 5432
        DB_NAME: test_db
        DB_USER: test_user
        DB_PASSWORD: test_password
        REDIS_URL: redis://localhost:6379
        JWT_SECRET: test-secret

    - name: Test Backend Health Check
      working-directory: ./backend
      run: |
        npm start &
        sleep 10
        curl -f http://localhost:3001/health || exit 1
        pkill node
      env:
        NODE_ENV: test
        PORT: 3001
        DB_HOST: localhost
        DB_PORT: 5432
        DB_NAME: test_db
        DB_USER: test_user
        DB_PASSWORD: test_password

  # Python Data Service Tests
  python-tests:
    runs-on: ubuntu-latest
    name: Python Data Service Tests
    
    steps:
    - name: Checkout Code
      uses: actions/checkout@v4

    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
        cache-dependency-path: data-service/requirements.txt

    - name: Install Python Dependencies
      working-directory: ./data-service
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov pytest-asyncio

    - name: Run Python Lint
      working-directory: ./data-service
      run: |
        pip install flake8
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

    - name: Run Python Tests
      working-directory: ./data-service
      run: |
        python -m pytest tests/ -v --cov=. --cov-report=xml
      continue-on-error: true

    - name: Test Data Service Health Check
      working-directory: ./data-service
      run: |
        python main.py &
        sleep 15
        curl -f http://localhost:8001/health || exit 1
        pkill python
      env:
        PORT: 8001
        HOST: 0.0.0.0

  # Docker Build Tests
  docker-build:
    runs-on: ubuntu-latest
    name: Docker Build Tests
    needs: [frontend-tests, backend-tests, python-tests]
    
    steps:
    - name: Checkout Code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build Backend Docker Image
      uses: docker/build-push-action@v5
      with:
        context: ./backend
        file: ./backend/Dockerfile
        push: false
        tags: formula4-backend:test
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Build Data Service Docker Image
      uses: docker/build-push-action@v5
      with:
        context: ./data-service
        file: ./data-service/Dockerfile
        push: false
        tags: formula4-data-service:test
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Test Docker Compose
      run: |
        echo "NODE_ENV=test" > .env.test
        echo "DB_NAME=test_db" >> .env.test
        echo "DB_USER=test_user" >> .env.test
        echo "DB_PASSWORD=test_password" >> .env.test
        echo "REDIS_PASSWORD=test_password" >> .env.test
        echo "JWT_SECRET=test-secret" >> .env.test
        
        docker-compose -f docker-compose.yml --env-file .env.test up -d --build
        sleep 30
        
        # Test services health
        curl -f http://localhost:3001/health
        curl -f http://localhost:8001/health
        
        docker-compose -f docker-compose.yml down

  # Security Scan
  security-scan:
    runs-on: ubuntu-latest
    name: Security Scan
    needs: [frontend-tests, backend-tests, python-tests]
    
    steps:
    - name: Checkout Code
      uses: actions/checkout@v4

    - name: Run Trivy Vulnerability Scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy Scan Results
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  # Code Quality Check
  code-quality:
    runs-on: ubuntu-latest
    name: Code Quality Analysis
    
    steps:
    - name: Checkout Code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: SonarCloud Scan
      uses: SonarSource/sonarcloud-github-action@master
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      continue-on-error: true

  # Notification
  notify:
    runs-on: ubuntu-latest
    name: Notify Results
    needs: [frontend-tests, backend-tests, python-tests, docker-build, security-scan]
    if: always()
    
    steps:
    - name: Notify Success
      if: ${{ needs.frontend-tests.result == 'success' && needs.backend-tests.result == 'success' && needs.python-tests.result == 'success' && needs.docker-build.result == 'success' }}
      run: |
        echo "✅ All tests passed successfully!"
        echo "Frontend: ${{ needs.frontend-tests.result }}"
        echo "Backend: ${{ needs.backend-tests.result }}" 
        echo "Python: ${{ needs.python-tests.result }}"
        echo "Docker: ${{ needs.docker-build.result }}"

    - name: Notify Failure
      if: ${{ needs.frontend-tests.result == 'failure' || needs.backend-tests.result == 'failure' || needs.python-tests.result == 'failure' || needs.docker-build.result == 'failure' }}
      run: |
        echo "❌ Some tests failed!"
        echo "Frontend: ${{ needs.frontend-tests.result }}"
        echo "Backend: ${{ needs.backend-tests.result }}"
        echo "Python: ${{ needs.python-tests.result }}"
        echo "Docker: ${{ needs.docker-build.result }}"
        exit 1