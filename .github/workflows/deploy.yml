name: Deploy to Production

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'staging'
        type: choice
        options:
        - staging
        - production

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  NODE_VERSION: '20'
  PYTHON_VERSION: '3.11'

jobs:
  # Build and Test before deployment
  pre-deploy-tests:
    runs-on: ubuntu-latest
    name: Pre-deployment Tests
    
    steps:
    - name: Checkout Code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install Dependencies
      run: |
        npm ci
        cd backend && npm ci
        cd ../data-service && pip install -r requirements.txt

    - name: Run Tests
      run: |
        cd dashboard && npm run test
        cd ../backend && npm test
        cd ../data-service && python -m pytest tests/ -v
      continue-on-error: true

  # Build Docker Images
  build-images:
    runs-on: ubuntu-latest
    name: Build Docker Images
    needs: pre-deploy-tests
    
    permissions:
      contents: read
      packages: write

    outputs:
      backend-image: ${{ steps.backend-meta.outputs.tags }}
      data-service-image: ${{ steps.data-service-meta.outputs.tags }}
      frontend-image: ${{ steps.frontend-meta.outputs.tags }}

    steps:
    - name: Checkout Code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    # Build Backend Image
    - name: Extract Backend Metadata
      id: backend-meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-backend
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=sha,prefix={{branch}}-

    - name: Build and Push Backend Image
      uses: docker/build-push-action@v5
      with:
        context: ./backend
        file: ./backend/Dockerfile
        push: true
        tags: ${{ steps.backend-meta.outputs.tags }}
        labels: ${{ steps.backend-meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    # Build Data Service Image
    - name: Extract Data Service Metadata
      id: data-service-meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-data-service
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=sha,prefix={{branch}}-

    - name: Build and Push Data Service Image
      uses: docker/build-push-action@v5
      with:
        context: ./data-service
        file: ./data-service/Dockerfile
        push: true
        tags: ${{ steps.data-service-meta.outputs.tags }}
        labels: ${{ steps.data-service-meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    # Build Frontend Image
    - name: Build Frontend
      working-directory: ./dashboard
      run: |
        npm ci
        npm run build

    - name: Extract Frontend Metadata
      id: frontend-meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-frontend
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=sha,prefix={{branch}}-

    - name: Create Frontend Dockerfile
      run: |
        cat > dashboard/Dockerfile.prod << 'EOF'
        FROM nginx:alpine
        COPY dist/ /usr/share/nginx/html/
        COPY nginx.conf /etc/nginx/conf.d/default.conf
        EXPOSE 80
        CMD ["nginx", "-g", "daemon off;"]
        EOF

    - name: Create Nginx Config
      run: |
        cat > dashboard/nginx.conf << 'EOF'
        server {
            listen 80;
            server_name localhost;
            root /usr/share/nginx/html;
            index index.html;
            
            location / {
                try_files $uri $uri/ /index.html;
            }
            
            location /api/ {
                proxy_pass http://backend:3001/api/;
                proxy_set_header Host $host;
                proxy_set_header X-Real-IP $remote_addr;
                proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            }
        }
        EOF

    - name: Build and Push Frontend Image
      uses: docker/build-push-action@v5
      with:
        context: ./dashboard
        file: ./dashboard/Dockerfile.prod
        push: true
        tags: ${{ steps.frontend-meta.outputs.tags }}
        labels: ${{ steps.frontend-meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # Deploy to Staging
  deploy-staging:
    runs-on: ubuntu-latest
    name: Deploy to Staging
    needs: build-images
    if: github.ref == 'refs/heads/main' || github.event.inputs.environment == 'staging'
    environment: staging
    
    steps:
    - name: Checkout Code
      uses: actions/checkout@v4

    - name: Deploy to Staging Server
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.STAGING_HOST }}
        username: ${{ secrets.STAGING_USER }}
        key: ${{ secrets.STAGING_SSH_KEY }}
        port: ${{ secrets.STAGING_PORT }}
        script: |
          cd /opt/formula4-analytics
          
          # Pull latest code
          git pull origin main
          
          # Update environment variables
          echo "NODE_ENV=staging" > .env
          echo "DB_NAME=${{ secrets.STAGING_DB_NAME }}" >> .env
          echo "DB_USER=${{ secrets.STAGING_DB_USER }}" >> .env
          echo "DB_PASSWORD=${{ secrets.STAGING_DB_PASSWORD }}" >> .env
          echo "REDIS_PASSWORD=${{ secrets.STAGING_REDIS_PASSWORD }}" >> .env
          echo "JWT_SECRET=${{ secrets.STAGING_JWT_SECRET }}" >> .env
          echo "FRONTEND_URL=${{ secrets.STAGING_FRONTEND_URL }}" >> .env
          echo "CORS_ORIGIN=${{ secrets.STAGING_CORS_ORIGIN }}" >> .env
          
          # Pull and deploy with Docker Compose
          docker-compose -f docker-compose.prod.yml pull
          docker-compose -f docker-compose.prod.yml up -d --remove-orphans
          
          # Wait for services to be ready
          sleep 30
          
          # Health checks
          curl -f http://localhost:3001/health || exit 1
          curl -f http://localhost:8001/health || exit 1
          
          # Clean up old images
          docker image prune -f

    - name: Verify Staging Deployment
      run: |
        sleep 10
        curl -f ${{ secrets.STAGING_FRONTEND_URL }}/health || exit 1
        echo "✅ Staging deployment successful"

  # Deploy to Production
  deploy-production:
    runs-on: ubuntu-latest
    name: Deploy to Production
    needs: [build-images, deploy-staging]
    if: startsWith(github.ref, 'refs/tags/v') || github.event.inputs.environment == 'production'
    environment: production
    
    steps:
    - name: Checkout Code
      uses: actions/checkout@v4

    - name: Deploy to Production Server
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.PRODUCTION_HOST }}
        username: ${{ secrets.PRODUCTION_USER }}
        key: ${{ secrets.PRODUCTION_SSH_KEY }}
        port: ${{ secrets.PRODUCTION_PORT }}
        script: |
          cd /opt/formula4-analytics
          
          # Create backup
          docker-compose -f docker-compose.prod.yml exec postgres pg_dump -U ${{ secrets.PRODUCTION_DB_USER }} ${{ secrets.PRODUCTION_DB_NAME }} > backup_$(date +%Y%m%d_%H%M%S).sql
          
          # Pull latest code
          git pull origin main
          
          # Update environment variables
          echo "NODE_ENV=production" > .env
          echo "DB_NAME=${{ secrets.PRODUCTION_DB_NAME }}" >> .env
          echo "DB_USER=${{ secrets.PRODUCTION_DB_USER }}" >> .env
          echo "DB_PASSWORD=${{ secrets.PRODUCTION_DB_PASSWORD }}" >> .env
          echo "REDIS_PASSWORD=${{ secrets.PRODUCTION_REDIS_PASSWORD }}" >> .env
          echo "JWT_SECRET=${{ secrets.PRODUCTION_JWT_SECRET }}" >> .env
          echo "FRONTEND_URL=${{ secrets.PRODUCTION_FRONTEND_URL }}" >> .env
          echo "CORS_ORIGIN=${{ secrets.PRODUCTION_CORS_ORIGIN }}" >> .env
          
          # Rolling deployment
          docker-compose -f docker-compose.prod.yml pull
          docker-compose -f docker-compose.prod.yml up -d --remove-orphans --scale backend=2
          
          # Wait for new services to be ready
          sleep 60
          
          # Health checks
          curl -f http://localhost:3001/health || exit 1
          curl -f http://localhost:8001/health || exit 1
          
          # Clean up old images
          docker image prune -f

    - name: Verify Production Deployment
      run: |
        sleep 30
        curl -f ${{ secrets.PRODUCTION_FRONTEND_URL }}/health || exit 1
        echo "✅ Production deployment successful"

    - name: Notify Production Deployment
      uses: 8398a7/action-slack@v3
      if: always()
      with:
        status: ${{ job.status }}
        text: |
          Formula 4 Analytics Production Deployment: ${{ job.status }}
          Version: ${{ github.ref_name }}
          Commit: ${{ github.sha }}
          Author: ${{ github.actor }}
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  # Database Migration (if needed)
  migrate-database:
    runs-on: ubuntu-latest
    name: Run Database Migrations
    needs: build-images
    if: contains(github.event.head_commit.message, '[migrate]') || github.event.inputs.environment == 'production'
    
    steps:
    - name: Checkout Code
      uses: actions/checkout@v4

    - name: Run Database Migrations
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ github.event.inputs.environment == 'production' && secrets.PRODUCTION_HOST || secrets.STAGING_HOST }}
        username: ${{ github.event.inputs.environment == 'production' && secrets.PRODUCTION_USER || secrets.STAGING_USER }}
        key: ${{ github.event.inputs.environment == 'production' && secrets.PRODUCTION_SSH_KEY || secrets.STAGING_SSH_KEY }}
        port: ${{ github.event.inputs.environment == 'production' && secrets.PRODUCTION_PORT || secrets.STAGING_PORT }}
        script: |
          cd /opt/formula4-analytics
          
          # Run database migrations
          docker-compose -f docker-compose.prod.yml exec -T postgres psql -U ${{ secrets.PRODUCTION_DB_USER }} -d ${{ secrets.PRODUCTION_DB_NAME }} -f /docker-entrypoint-initdb.d/init-db.sql
          
          echo "✅ Database migrations completed"

  # Post-deployment Tests
  post-deploy-tests:
    runs-on: ubuntu-latest
    name: Post-deployment Integration Tests
    needs: [deploy-staging]
    if: always() && needs.deploy-staging.result == 'success'
    
    steps:
    - name: Checkout Code
      uses: actions/checkout@v4

    - name: Run Integration Tests
      run: |
        # API Health Check
        curl -f ${{ secrets.STAGING_FRONTEND_URL }}/api/health
        
        # Data Service Health Check
        curl -f ${{ secrets.STAGING_FRONTEND_URL }}/api/telemetry/capabilities
        
        # Upload Test (if test file exists)
        if [ -f "test-data/sample-telemetry.csv" ]; then
          curl -X POST -F "file=@test-data/sample-telemetry.csv" \
               -H "Content-Type: multipart/form-data" \
               ${{ secrets.STAGING_FRONTEND_URL }}/api/upload/validate
        fi
        
        echo "✅ Integration tests passed"

  # Cleanup
  cleanup:
    runs-on: ubuntu-latest
    name: Cleanup Old Deployments
    needs: [deploy-production]
    if: always()
    
    steps:
    - name: Cleanup Old Docker Images
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.PRODUCTION_HOST }}
        username: ${{ secrets.PRODUCTION_USER }}
        key: ${{ secrets.PRODUCTION_SSH_KEY }}
        script: |
          # Keep only the last 5 images for each service
          docker images --format "table {{.Repository}}:{{.Tag}}\t{{.CreatedAt}}" | grep formula4 | sort -k2 -r | tail -n +6 | awk '{print $1}' | xargs -r docker rmi
          
          # Clean up unused volumes and networks
          docker volume prune -f
          docker network prune -f
          
          echo "✅ Cleanup completed"